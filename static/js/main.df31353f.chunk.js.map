{"version":3,"sources":["components/Wrapper/index.js","components/AnimalCard/index.js","components/Title/index.js","components/Message/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","AnimalCard","alt","name","src","image","onClick","shuffleAnimal","id","Title","Message","correctGuess","highScore","clickMessage","App","state","animals","clickedAnimal","filter","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"41BAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCS1BC,MAVf,SAAoBH,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,MAAOC,QAAS,kBAAMR,EAAMS,cAAcT,EAAMU,U,MCA1EC,MAJf,SAAeX,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,MCGvBU,MAJf,SAAiBZ,GACf,OAAO,wBAAIC,UAAU,WAAWD,EAAME,W,OCIpCW,G,MAAe,GACfC,EAAY,EACZC,EAAe,gGA+FJC,E,4MA5FbC,MAAQ,CACNC,UACAL,eACAC,YACAC,gB,EAGFN,cAAgB,SAAAC,GACd,IAAMQ,EAAU,EAAKD,MAAMC,QAErBC,EAAgBD,EAAQE,QAAO,SAAAb,GAAK,OAAIA,EAAMG,KAAOA,KAE3D,GAAIS,EAAc,GAAGE,QAAQ,CAE3BC,QAAQC,IAAK,kBAAoBV,GACjCS,QAAQC,IAAK,eAAiBT,GAE9BD,EAAe,EACfE,EAAe,sCAEf,IAAK,IAAIS,EAAI,EAAIA,EAAIN,EAAQO,OAASD,IACpCN,EAAQM,GAAGH,SAAU,EAGvB,EAAKK,SAAS,CAACX,iBACf,EAAKW,SAAS,CAAEb,iBAChB,EAAKa,SAAS,CAACR,iBAGZ,GAAIL,EAAe,GAEhBM,EAAc,GAAGE,SAAU,EAE3BR,IAEAE,EAAe,2CAEXF,EAAeC,IACfA,EAAYD,EACZ,EAAKa,SAAS,CAAEZ,eAGpBI,EAAQS,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAE9C,EAAKL,SAAS,CAAER,YAChB,EAAKQ,SAAS,CAACb,iBACf,EAAKa,SAAS,CAACX,qBACZ,CAEHI,EAAc,GAAGE,SAAU,EAE3BR,EAAe,EAEfE,EAAe,0CACfD,EAAY,GACZ,EAAKY,SAAS,CAAEZ,cAEhB,IAAK,IAAIU,EAAI,EAAIA,EAAIN,EAAQO,OAASD,IACpCN,EAAQM,GAAGH,SAAU,EAGvBH,EAAQS,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAE9C,EAAKL,SAAS,CAAER,YAChB,EAAKQ,SAAS,CAACb,iBACf,EAAKa,SAAS,CAACX,mB,uDAKf,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,oBAEA,kBAAC,EAAD,uBAAyBiB,KAAKf,MAAMJ,cACrC,6BACC,kBAAC,EAAD,oBAAsBmB,KAAKf,MAAMH,UAAjC,KAEA,kBAAC,EAAD,KAAUkB,KAAKf,MAAMF,cAEpBiB,KAAKf,MAAMC,QAAQe,KAAI,SAAAf,GAAO,OAC7B,kBAAC,EAAD,CACAT,cAAe,EAAKA,cAClBC,GAAIQ,EAAQR,GACZH,MAAOW,EAAQX,gB,GAtFT2B,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.df31353f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction AnimalCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} onClick={() => props.shuffleAnimal(props.id)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnimalCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Message(props) {\r\n  return <h3 className=\"message\">{props.children}</h3>;\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport AnimalCard from \"./components/AnimalCard\";\nimport Title from \"./components/Title\";\nimport Message from \"./components/Message\";\nimport animals from \"./animals.json\";\nimport './App.css';\n\nlet correctGuess = 0;\nlet highScore = 0;\nlet clickMessage = \"Click on a cute baby animal picture to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n  state = {\n    animals,\n    correctGuess,\n    highScore,\n    clickMessage   \n  };\n\n  shuffleAnimal = id => {\n    const animals = this.state.animals;\n\n    const clickedAnimal = animals.filter(image => image.id === id);\n\n    if (clickedAnimal[0].clicked){\n\n      console.log (\"Correct Guess: \" + correctGuess);\n      console.log (\"Best Score: \" + highScore);\n\n      correctGuess = 0;\n      clickMessage = \"The cuteness tricked you. You lose!\"\n\n      for (let i = 0 ; i < animals.length ; i++){\n        animals[i].clicked = false;\n      }\n\n      this.setState({clickMessage});\n      this.setState({ correctGuess });\n      this.setState({animals});\n\n    }\n    else if (correctGuess < 11) {\n\n            clickedAnimal[0].clicked = true;\n\n            correctGuess++;\n            \n            clickMessage = \"Awww! Now find another cute baby animal.\";\n\n            if (correctGuess > highScore){\n                highScore = correctGuess;\n                this.setState({ highScore });\n            }\n\n            animals.sort(function(a, b){return 0.5 - Math.random()});\n\n            this.setState({ animals });\n            this.setState({correctGuess});\n            this.setState({clickMessage});\n        } else {\n\n            clickedAnimal[0].clicked = true;\n\n            correctGuess = 0;\n\n            clickMessage = \"You correctly guessed all the animals!!\";\n            highScore = 12;\n            this.setState({ highScore });\n            \n            for (let i = 0 ; i < animals.length ; i++){\n              animals[i].clicked = false;\n            }\n\n            animals.sort(function(a, b){return 0.5 - Math.random()});\n\n            this.setState({ animals });\n            this.setState({correctGuess});\n            this.setState({clickMessage});\n\n        }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Clicky Game</Title>\n        \n        <Message>Correct Guess: {this.state.correctGuess}</Message>\n       <br/>\n        <Message>High Score: {this.state.highScore} </Message>\n        \n        <Message>{this.state.clickMessage}</Message>\n        \n        {this.state.animals.map(animals => (\n          <AnimalCard\n          shuffleAnimal={this.shuffleAnimal}\n            id={animals.id}\n            image={animals.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}